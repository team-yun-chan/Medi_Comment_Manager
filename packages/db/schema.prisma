generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts        Account[]
  youtubeChannels YoutubeChannel[]
  instagramPages  InstagramPage[]
  rules           ModerationRule[]
  auditLogs       AuditLog[]
}

model Account {
  id           String    @id @default(cuid())
  userId       String
  provider     String    // 'google' | 'meta'
  accessToken  String    @db.Text
  refreshToken String?   @db.Text
  expiresAt    DateTime?
  scope        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
}

// ===== YouTube Models =====

model YoutubeChannel {
  id        String   @id @default(cuid())
  channelId String   @unique
  title     String
  userId    String
  createdAt DateTime @default(now())
  
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos YoutubeVideo[]
}

model YoutubeVideo {
  id        String   @id @default(cuid())
  videoId   String   @unique
  title     String
  channelId String
  createdAt DateTime @default(now())
  
  channel  YoutubeChannel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  comments YoutubeComment[]
}

model YoutubeComment {
  id              String   @id @default(cuid())
  commentId       String   @unique
  videoId         String
  parentId        String?
  text            String   @db.Text
  authorName      String
  authorChannelId String?
  likeCount       Int      @default(0)
  publishedAt     DateTime
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  video YoutubeVideo @relation(fields: [videoId], references: [videoId], onDelete: Cascade)
  
  @@index([videoId])
  @@index([authorChannelId])
}

// ===== Instagram Models =====

model InstagramPage {
  id          String   @id @default(cuid())
  fbPageId    String   @unique
  igId        String?
  username    String?
  name        String
  userId      String
  accessToken String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  media InstagramMedia[]
}

model InstagramMedia {
  id        String   @id @default(cuid())
  mediaId   String   @unique
  pageId    String
  caption   String?  @db.Text
  permalink String?
  timestamp DateTime
  createdAt DateTime @default(now())
  
  page     InstagramPage     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  comments InstagramComment[]
  
  @@index([pageId])
}

model InstagramComment {
  id        String   @id @default(cuid())
  commentId String   @unique
  mediaId   String
  parentId  String?
  text      String   @db.Text
  username  String
  hidden    Boolean  @default(false)
  likeCount Int      @default(0)
  timestamp DateTime
  createdAt DateTime @default(now())
  
  media InstagramMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@index([mediaId])
  @@index([username])
}

// ===== Moderation Models =====

model ModerationRule {
  id        String   @id @default(cuid())
  userId    String
  name      String
  platform  String   // 'youtube' | 'instagram' | 'all'
  type      String   // 'keyword' | 'regex' | 'user' | 'spam'
  pattern   String
  action    String   // 'hide' | 'delete' | 'reply'
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions ModerationAction[]
  
  @@index([userId, enabled])
}

model ModerationAction {
  id        String   @id @default(cuid())
  ruleId    String
  commentId String
  platform  String
  action    String
  status    String   // 'pending' | 'done' | 'failed'
  error     String?
  createdAt DateTime @default(now())
  
  rule ModerationRule @relation(fields: [ruleId], references: [id])
  
  @@index([status])
}

// ===== Audit & Logging =====

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  platform   String
  entityType String
  entityId   String
  action     String
  meta       Json?
  createdAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId, createdAt])
}

model WebhookLog {
  id        String   @id @default(cuid())
  platform  String
  event     String
  payload   Json
  status    String
  error     String?
  createdAt DateTime @default(now())
  
  @@index([platform, createdAt])
}
